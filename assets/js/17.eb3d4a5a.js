(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{461:function(a,t,s){"use strict";s.r(t);var e=s(33),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h3",{attrs:{id:"查看本地所有分枝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看本地所有分枝"}},[a._v("#")]),a._v(" 查看本地所有分枝")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git branch\n")])])]),s("h3",{attrs:{id:"查看远程所有分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看远程所有分支"}},[a._v("#")]),a._v(" 查看远程所有分支")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git branch -a\n")])])]),s("h3",{attrs:{id:"_2-拉取本地没有的远程分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-拉取本地没有的远程分支"}},[a._v("#")]),a._v(" 2. 拉取本地没有的远程分支")]),a._v(" "),s("ul",[s("li",[a._v("拉取远程分支：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git fetch origin 分支名称\n")])])]),s("ul",[s("li",[a._v("新建并切换到")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git checkout -b 分支名称 origin/分支名称\n")])])]),s("ul",[s("li",[a._v("只执行切换分支：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git checkout 分支名称\n")])])]),s("h3",{attrs:{id:"_3-提交修改并推送到远程分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-提交修改并推送到远程分支"}},[a._v("#")]),a._v(" 3. 提交修改并推送到远程分支")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git add 文件名 或 git add .\n")])])]),s("ul",[s("li",[a._v("从暂存区添加到缓存区")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git commit -m “自填提交内容信息”\n")])])]),s("ul",[s("li"),a._v(" "),s("li",[a._v("—从暂存区添加到本地仓库")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v(" git push\n// 推送主分支所有内容\ngit push origin master\n// 推送其他分支(dev)\ngit push origin dev\n")])])]),s("h3",{attrs:{id:"删除本地分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除本地分支"}},[a._v("#")]),a._v(" 删除本地分支")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git branch -D <BranchName>\n")])])]),s("h3",{attrs:{id:"删除本地全部分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除本地全部分支"}},[a._v("#")]),a._v(" 删除本地全部分支")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// 强制删除所有分支（慎用，有些本地修改你可能没有提交）\ngit branch |xargs git branch -D\n\n// 删除本地所有与远程仓库同步分支（本地修改过未提交的不会删除）\ngit branch |xargs git branch -dz\n")])])]),s("h3",{attrs:{id:"获取某次提交的代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取某次提交的代码"}},[a._v("#")]),a._v(" 获取某次提交的代码")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git cherry-pick 分支id\n")])])]),s("h3",{attrs:{id:"git-stash-的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-的使用"}},[a._v("#")]),a._v(" git stash 的使用")]),a._v(" "),s("ol",[s("li",[a._v("保存 stash title 为 saveName")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git stash save 'saveName'\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("查看 stash 列表")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git stash list\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[a._v("找回 stash 且不删除 stash list 中的内容")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git stash apply stash@{0}\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[a._v("删除指定 stash 中的内容")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("git stash drop stash@{0}\n")])])]),s("h3",{attrs:{id:"打-tag-标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#打-tag-标签"}},[a._v("#")]),a._v(" 打 tag 标签")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("npm run pub\n")])])]),s("h3",{attrs:{id:"git-merge-和-git-rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-和-git-rebase"}},[a._v("#")]),a._v(" git merge 和 git rebase")]),a._v(" "),s("h4",{attrs:{id:"git-merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[a._v("#")]),a._v(" git merge")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("直接使用 "),s("code",[a._v("git merge")])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("git --no-ff")]),a._v("\n--no-ff：不使用 "),s("code",[a._v("fast-forward")]),a._v(" 方式合并，保留分支的 commit 历史。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("git --squash")]),a._v("\n--squash 是用来把一些不必要 commit 进行压缩，比如说，你的 feature 在开发的时候写的 commit 很乱，那么我们合并的时候不希望把这些历史 commit 带过来，于是使用--squash 进行合并，此时文件已经同合并后一样了，但不移动 HEAD，不提交。需要进行一次额外的 commit 来“总结”一下，然后完成最终的合并。")])]),a._v(" "),s("li",[s("p",[a._v("什么是 fast-forward")])])]),a._v(" "),s("ul",[s("li",[a._v("解释: 就是当条件允许的时候，git 直接把 HEAD 指针指向合并分支的头，完成合并。\n"),s("ul",[s("li",[a._v("自己理解为：自己本地分支 commit 的多次代码直接压缩为一次提交，然后合并到远程分支")])])]),a._v(" "),s("li",[a._v("可能出现的问题：\n"),s("ul",[s("li",[a._v("删除分支，会丢失分支信息，因为 commit 已经压缩为了一次提交")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);